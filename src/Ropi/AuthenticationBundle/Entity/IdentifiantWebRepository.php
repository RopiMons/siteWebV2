<?php

namespace Ropi\AuthenticationBundle\Entity;

use Doctrine\ORM\EntityRepository;
//use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * IdentifiantWebRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class IdentifiantWebRepository extends EntityRepository  implements UserLoaderInterface
{
    public function loadUserByUsername($username) {
          $q = $this
                ->createQueryBuilder('i')
                ->select(array('i','p','r'))
                ->leftJoin('i.role','r')
                ->leftJoin('i.permission','p')
                ->where('i.username = :login')
                ->setParameter('login', $username)
                ->getQuery();
          try {
            // La méthode Query::getSingleResult() lance une exception
            // s'il n'y a pas d'entrée correspondante aux critères
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('L\'utilisateur "%s" n\'a pas été trouvé ou n\'est pas actif.', $username), 0, $e);
        }

        return $user;
    }
    public function loadById($id){
        $q = $this
                ->createQueryBuilder('i')
               ->select(array('i','p','r','pe'))
               ->leftJoin('i.personne','p')
                ->leftJoin('i.role','r')
            ->leftJoin('i.permission','pe')
                ->where('i.id = :id')
                ->setParameter('id', $id)
                ->getQuery();



        try {
            // La méthode Query::getSingleResult() lance une exception
            // s'il n'y a pas d'entrée correspondante aux critères
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('L\'utilisateur "%s" n\'a pas été trouvé ou n\'est pas actif.', $username), 0, $e);
        }

        return $user;

    }

    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user) {
    $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
            sprintf(
                    'Instances of "%s" are not supported.', $class
            )
            );
        }

        return $this->loadById($user->getId());
    }

    public function supportsClass($class) {
          return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    
    }
}
